syntax = "proto2";
package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

message Message {
  optional uint64      term     = 1   [(gogoproto.nullable) = false];
  optional uint64      from     = 2   [(gogoproto.nullable) = false];
  optional uint64      to       = 3   [(gogoproto.nullable) = false];
  optional MessageType type     = 4   [(gogoproto.nullable) = false];
  optional uint64      index    = 5   [(gogoproto.nullable) = false];
  optional uint64      logTerm  = 6   [(gogoproto.nullable) = false];
  optional uint64      commit   = 7   [(gogoproto.nullable) = false];
  optional int64       tid      = 8   [(gogoproto.nullable) = false];
  optional uint64      proxy    = 9   [(gogoproto.nullable) = false];
  repeated Entry       entries  = 10  [(gogoproto.nullable) = false];
  optional bool        success  = 11  [(gogoproto.nullable) = false];
}

enum MessageType {
  MsgUnknown  = 0;
  
  // MsgApp Fields
  // * index:    previous entry index
  // * logTerm:  previous entry term
  // * commit:   leader's commit
  // * tid:      read request context if ConsistencyStrict,
  //             lease start if ConsistencyLease,
  //             otherwise 0
  // * proxy:    read request context, otherwise 0 if none
  // * entries:  entries to append, ignored if there is read request context
  MsgApp      = 1;

  // MsgAppResp Fields
  // * index:    index of the largest match index,
  // * tid:      read request context if ConsistencyStrict,
  //             lease start if ConsistencyLease,
  //             otherwise 0
  // * proxy:    read request context if ConsistencyStrict, otherwise 0
  // * success:  whether or not the append request was successful
  MsgAppResp  = 2;

  // MsgRead Fields
  // * tid: read request context
  MsgRead     = 3;
  
  // MsgReadResp Fields
  // * tid:     read request context
  // * index:   read index
  MsgReadResp = 4;

  // MsgProp Fields
  // * tid:      context associated with a proposal request
  // * entries:  contains only 1 entry, of which only the data field is used
  //             to contain the proposed data
  MsgProp     = 5;

  // MsgPropResp Fields
  // * tid:      context associated with a proposal request
  // * index:    index of the successfully proposed entry, 0 if unsuccessful
  // * logTerm:  term of the successfully proposed entry, 0 if unsuccessful
  MsgPropResp = 6;

  // MsgVote Fields
  // * index:   index of the candidate's last entry
  // * logTerm: term of the candidate's last entry
  MsgVote     = 7;

  // MsgVoteResp Fields (none)
  MsgVoteResp = 8;
}

message Entry {
  optional uint64 index = 1  [(gogoproto.nullable) = false];
  optional uint64 term  = 2  [(gogoproto.nullable) = false];
  optional bytes  data  = 3  [(gogoproto.nullable) = false];
}

message Empty {}

service RaftProtocol {
  rpc Communicate(stream Message) returns (Empty) {}
}
